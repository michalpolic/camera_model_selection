function [ u ] = proj( cam, img, X )
%PROJ - project the point in 3D into image generated by camera and image
%parameters 
    cp = cam.params;

    switch cam.model
        case 'SIMPLE_PINHOLE'       % f, cx, cy
            u = cp(1) * h2a(img.R * X + img.t) + cp(2:3);
            
        case 'PINHOLE'              % fx, fy, cx, cy
            u = [cp(1) 0; 0 cp(2)] * h2a(img.R * X + img.t) + cp(3:4);
            
        case 'SIMPLE_RADIAL'        % f, cx, cy, k1
            un = h2a(img.R * X + img.t);
            r2 = sum(un.^2);
            u = cp(1) * un .* (ones(2,1) * (1 + cp(4)*r2)) + cp(2:3);
            
        case 'RADIAL'               % f, cx, cy, k1, k2
            un = h2a(img.R * X + img.t);
            r2 = sum(un.^2);
            u = cp(1) * un .* (ones(2,1) * (1 + cp(4)*r2 + cp(5)*r2.*r2)) + cp(2:3);
            
        case 'RADIAL3'               % f, cx, cy, k1, k2, k3
            un = h2a(img.R * X + img.t);
            r2 = sum(un.^2);
            u = cp(1) * un .* (ones(2,1) * (1 + cp(4)*r2 + cp(5)*r2.*r2 + cp(6)*r2.*r2.*r2)) + cp(2:3);
            
        case 'RADIAL4'               % f, cx, cy, k1, k2, k3, k4
            un = h2a(img.R * X + img.t);
            r2 = sum(un.^2);
            u = cp(1) * un .* (ones(2,1) * (1 + cp(4)*r2 + cp(5)*r2.*r2 + cp(6)*r2.*r2.*r2 + cp(7)*r2.*r2.*r2.*r2)) + cp(2:3);
        
        case 'RADIAL3_DIVISION1'    % f, cx, cy, k1, k2, k3, k4
            un = h2a(img.R * X + img.t);
            r2 = sum(un.^2);
            r4 = r2.*r2;
            radial = (1 + cp(4)*r2 + cp(5)*r4 + cp(6)*r4.*r2) ./ ...
                     (1 + cp(7)*r2);
            u = cp(1) * un .* (ones(2,1) * radial) + cp(2:3);
            
        case 'RADIAL3_DIVISION2'    % f, cx, cy, k1, k2, k3, k4, k5
            un = h2a(img.R * X + img.t);
            r2 = sum(un.^2);
            r4 = r2.*r2;
            r6 = r4.*r2;
            radial = (1 + cp(4)*r2 + cp(5)*r4 + cp(6)*r6) ./ (1 + cp(7)*r2 + cp(8)*r4);
            u = cp(1) * un .* (ones(2,1) * radial) + cp(2:3);    
            
        case 'RADIAL3_DIVISION3'    % f, cx, cy, k1, k2, k3, k4, k5, k6
            un = h2a(img.R * X + img.t);
            r2 = sum(un.^2);
            r4 = r2.*r2;
            r6 = r4.*r2;
            radial = (1 + cp(4)*r2 + cp(5)*r4 + cp(6)*r6) ./ (1 + cp(7)*r2 + cp(8)*r4 + cp(9)*r6);
            u = cp(1) * un .* (ones(2,1) * radial) + cp(2:3);        
            
    	case 'RADIAL1_DIVISION1'    % f, cx, cy, k1, k2
            un = h2a(img.R * X + img.t);
            r2 = sum(un.^2);
            radial = (1 + cp(4)*r2) ./ (1 + cp(5)*r2);
            u = cp(1) * un .* (ones(2,1) * radial) + cp(2:3);            
            
        case 'RADIAL2_DIVISION2'    % f, cx, cy, k1, k2, k3, k4
            un = h2a(img.R * X + img.t);
            r2 = sum(un.^2);
            r4 = r2.*r2;
            radial = (1 + cp(4)*r2 + cp(5)*r4) ./ (1 + cp(6)*r2 + cp(7)*r4);
            u = cp(1) * un .* (ones(2,1) * radial) + cp(2:3);            
            
        case 'DIVISION1'            % f, cx, cy, d1
            un = h2a(img.R * X + img.t);
            r2 = sum(un.^2);
            un = un ./ ([1;1] * (1 + cp(4) * r2));
            u = cp(1) * un + cp(2:3);
            
        case 'DIVISION2'            % f, cx, cy, d1, d2
            un = h2a(img.R * X + img.t);
            r2 = sum(un.^2);
            un = un ./ ([1;1] * (1 + cp(4) * r2 + cp(5) * r2 .* r2));
            u = cp(1) * un + cp(2:3);
        
        case 'DIVISION3'            % f, cx, cy, d1, d2, d3
            un = h2a(img.R * X + img.t);
            r2 = sum(un.^2);
            r4 = r2 .* r2;
            un = un ./ ([1;1] * (1 + cp(4)*r2 + cp(5)*r4 + cp(6)*r4.*r2));
            u = cp(1) * un + cp(2:3);
            
        case 'DIVISION4'            % f, cx, cy, d1, d2, d3, d4 
            un = h2a(img.R * X + img.t);
            r2 = sum(un.^2);
            r4 = r2 .* r2;
            un = un ./ ([1;1] * (1 + cp(4)*r2 + cp(5)*r4 + cp(6)*r4.*r2 + cp(7)*r4.*r4));
            u = cp(1) * un + cp(2:3);
            
        case 'I_DIVISION1'            % f, cx, cy, d1'
            un = h2a(img.R * X + img.t);
            s = sqrt(sum(un.^2));
            D = sqrt(1-4*cp(4)*s.^2);
            ks2 = 2*cp(4)*s;
            c_1 = (1 + D) ./ ks2 ./ s;
            c_2 = (1 - D) ./ ks2 ./ s;
            [~, sel] = min([abs(c_1 - 1); abs(c_2 - 1)]); 
            c = c_1 .* (sel ==1) + c_2 .* (sel == 2); 
            u = cp(1) * (un .* c) + cp(2:3);
            
        case 'I_DIVISION2'            % f, cx, cy, d1, d2
            un = h2a(img.R * X + img.t);
            s = sqrt(sum(un.^2));
            c = iDiv2toDiv2( cp(4), cp(5), s ) ./ ([1;1;1;1] * s);
            c(abs(imag(c))>1e-10) = inf;
            c = real(c);
            [~, sel] = min(abs(c - 1)); 
            c = arrayfun(@(i)c(sel(i),i),1:size(sel,2)); 
            u = cp(1) * (un .* c) + cp(2:3);
        
        case 'I_DIVISION3'            % f, cx, cy, d1, d2, d3
            un = h2a(img.R * X + img.t);
            s = sqrt(sum(un.^2));
            c = iDiv3toDiv3( cp(4), cp(5), cp(6), s ) ./ (ones(6,1) * s);
            c(abs(imag(c))>1e-5) = inf;
            c = real(c);
            [~, sel] = min(abs(c - 1)); 
            c = arrayfun(@(i)c(sel(i),i),1:size(sel,2)); 
            u = cp(1) * (un .* c) + cp(2:3);
            
        case 'I_DIVISION4'            % f, cx, cy, d1, d2, d3, d4 
            un = h2a(img.R * X + img.t);
            s = sqrt(sum(un.^2));
            c = iDiv4toDiv4( cp(4), cp(5), cp(6), cp(7), s ) ./ (ones(8,1) * s);
            c(abs(imag(c))>1e-10) = inf;
            c = real(c);
            [~, sel] = min(abs(c - 1)); 
            c = arrayfun(@(i)c(sel(i),i),1:size(sel,2)); 
            u = cp(1) * (un .* c) + cp(2:3);
            
        case 'SIMPLE_RADIAL_FISHEYE'  % f, cx, cy, k1
            un = h2a(img.R * X + img.t);
            r = sqrt(un(1,:).*un(1,:) + un(2,:).*un(2,:));
			theta = atan(r);
			thetad = theta .* (1 + cp(4)*theta.^2);
			un(1,:) = un(1,:) .* (thetad ./ r);
			un(2,:) = un(2,:) .* (thetad ./ r);
			u = cp(1) * un + cp(2:3);     
            
        case 'RADIAL_FISHEYE'       % f, cx, cy, k1, k2
            un = h2a(img.R * X + img.t);
            r = sqrt(un(1,:).*un(1,:) + un(2,:).*un(2,:));
			theta = atan(r);
			theta2 = theta .* theta;
			thetad = theta .* (1 + cp(4)*theta2 +  cp(5)*theta2.*theta2);
			un(1,:) = un(1,:) .* (thetad ./ r);
			un(2,:) = un(2,:) .* (thetad ./ r);
			u = cp(1) * un + cp(2:3);
            
        case 'OPENCV'               % fx, fy, cx, cy, k1, k2, p1, p2
            un = h2a(img.R * X + img.t);
            u2 = un(1,:).*un(1,:);
			uv = un(1,:).*un(2,:);
			v2 = un(2,:).*un(2,:);
			r2 = u2 + v2;
            radial = repmat(cp(5)*r2 + cp(6)*r2.*r2, 2, 1);
            tangen = [2*cp(7)*uv + cp(8)*(r2 + 2*u2); ...
                      2*cp(8)*uv + cp(7)*(r2 + 2*v2)];
            du = un .* radial + tangen;
            u = [cp(1) 0; 0 cp(2)] * (un + du) + cp(3:4);     

        case 'OPENCV_FISHEYE'       % fx, fy, cx, cy, k1, k2, k3, k4   
            un = h2a(img.R * X + img.t);
            r = sqrt(sum(un.^2));
			theta = atan(r);
            thetad = theta .* (1 + cp(5) * theta.^2 + cp(6) * theta.^4 + cp(7) * theta.^6 + cp(8) * theta.^8);
            du = un .* repmat(thetad ./ r,2,1) - un;
            u = [cp(1) 0; 0 cp(2)] * (un + du) + cp(3:4);
            
        case 'FULL_OPENCV'          % fx, fy, cx, cy, k1, k2, p1, p2, k3, k4, k5, k6
            un = h2a(img.R * X + img.t);
            u2 = un(1,:) .* un(1,:);
            uv = un(1,:) .* un(2,:);
            v2 = un(2,:) .* un(2,:);
            r2 = u2 + v2;
            r4 = r2 .* r2;
            r6 = r4 .* r2;
            radial = (1 + cp(5) * r2 + cp(6) * r4 + cp(9) * r6) ./ (1 + cp(10) * r2 + cp(11) * r4 + cp(12) * r6);
            un(1,:) = un(1,:) .* radial + 2 * cp(7) * uv + cp(8) * (r2 + 2 * u2);
            un(2,:) = un(2,:) .* radial + 2 * cp(8) * uv + cp(7) * (r2 + 2 * v2);
            u = [cp(1) 0; 0 cp(2)] * un + cp(3:4);
           
        otherwise
            error('Unknown new camera model!');
    end

end

